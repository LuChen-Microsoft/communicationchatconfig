var SdkIntKindsEnum;
(function (SdkIntKindsEnum) {
    SdkIntKindsEnum["numeric"] = "numeric";
    SdkIntKindsEnum["integer"] = "integer";
    SdkIntKindsEnum["safeint"] = "safeint";
    SdkIntKindsEnum["int8"] = "int8";
    SdkIntKindsEnum["int16"] = "int16";
    SdkIntKindsEnum["int32"] = "int32";
    SdkIntKindsEnum["int64"] = "int64";
    SdkIntKindsEnum["uint8"] = "uint8";
    SdkIntKindsEnum["uint16"] = "uint16";
    SdkIntKindsEnum["uint32"] = "uint32";
    SdkIntKindsEnum["uint64"] = "uint64";
})(SdkIntKindsEnum || (SdkIntKindsEnum = {}));
var SdkFloatKindsEnum;
(function (SdkFloatKindsEnum) {
    SdkFloatKindsEnum["float"] = "float";
    SdkFloatKindsEnum["float32"] = "float32";
    SdkFloatKindsEnum["float64"] = "float64";
    SdkFloatKindsEnum["decimal"] = "decimal";
    SdkFloatKindsEnum["decimal128"] = "decimal128";
})(SdkFloatKindsEnum || (SdkFloatKindsEnum = {}));
var SdkAzureBuiltInStringKindsEnum;
(function (SdkAzureBuiltInStringKindsEnum) {
    SdkAzureBuiltInStringKindsEnum["uuid"] = "uuid";
    SdkAzureBuiltInStringKindsEnum["ipV4Address"] = "ipV4Address";
    SdkAzureBuiltInStringKindsEnum["ipV6Address"] = "ipV6Address";
    SdkAzureBuiltInStringKindsEnum["eTag"] = "eTag";
    SdkAzureBuiltInStringKindsEnum["armId"] = "armId";
    SdkAzureBuiltInStringKindsEnum["azureLocation"] = "azureLocation";
})(SdkAzureBuiltInStringKindsEnum || (SdkAzureBuiltInStringKindsEnum = {}));
var SdkGenericBuiltInStringKindsEnum;
(function (SdkGenericBuiltInStringKindsEnum) {
    SdkGenericBuiltInStringKindsEnum["string"] = "string";
    SdkGenericBuiltInStringKindsEnum["password"] = "password";
    SdkGenericBuiltInStringKindsEnum["guid"] = "guid";
    SdkGenericBuiltInStringKindsEnum["url"] = "url";
    SdkGenericBuiltInStringKindsEnum["uri"] = "uri";
    SdkGenericBuiltInStringKindsEnum["ipAddress"] = "ipAddress";
})(SdkGenericBuiltInStringKindsEnum || (SdkGenericBuiltInStringKindsEnum = {}));
var SdkBuiltInKindsMiscellaneousEnum;
(function (SdkBuiltInKindsMiscellaneousEnum) {
    SdkBuiltInKindsMiscellaneousEnum["bytes"] = "bytes";
    SdkBuiltInKindsMiscellaneousEnum["boolean"] = "boolean";
    SdkBuiltInKindsMiscellaneousEnum["plainDate"] = "plainDate";
    SdkBuiltInKindsMiscellaneousEnum["plainTime"] = "plainTime";
    SdkBuiltInKindsMiscellaneousEnum["any"] = "any";
})(SdkBuiltInKindsMiscellaneousEnum || (SdkBuiltInKindsMiscellaneousEnum = {}));
export function getKnownScalars() {
    const retval = {};
    const typespecNamespace = Object.keys(SdkBuiltInKindsMiscellaneousEnum)
        .concat(Object.keys(SdkIntKindsEnum))
        .concat(Object.keys(SdkFloatKindsEnum))
        .concat(Object.keys(SdkGenericBuiltInStringKindsEnum));
    for (const kind of typespecNamespace) {
        if (!isSdkBuiltInKind(kind))
            continue; // it will always be true
        retval[`TypeSpec.${kind}`] = kind;
    }
    for (const kind in SdkAzureBuiltInStringKindsEnum) {
        if (!isSdkBuiltInKind(kind))
            continue; // it will always be true
        retval[`Azure.Core.${kind}`] = kind;
    }
    return retval;
}
export function isSdkBuiltInKind(kind) {
    return (kind in SdkBuiltInKindsMiscellaneousEnum ||
        isSdkIntKind(kind) ||
        isSdkFloatKind(kind) ||
        kind in SdkGenericBuiltInStringKindsEnum ||
        kind in SdkAzureBuiltInStringKindsEnum);
}
export function isSdkIntKind(kind) {
    return kind in SdkIntKindsEnum;
}
export function isSdkFloatKind(kind) {
    return kind in SdkFloatKindsEnum;
}
const SdkDatetimeEncodingsConst = ["rfc3339", "rfc7231", "unixTimestamp"];
export function isSdkDatetimeEncodings(encoding) {
    return SdkDatetimeEncodingsConst.includes(encoding);
}
/**
 * This enum represents the different ways a model can be used in a method.
 */
export var UsageFlags;
(function (UsageFlags) {
    UsageFlags[UsageFlags["None"] = 0] = "None";
    UsageFlags[UsageFlags["Input"] = 2] = "Input";
    UsageFlags[UsageFlags["Output"] = 4] = "Output";
    UsageFlags[UsageFlags["ApiVersionEnum"] = 8] = "ApiVersionEnum";
    // Input will also be set when JsonMergePatch is set.
    UsageFlags[UsageFlags["JsonMergePatch"] = 16] = "JsonMergePatch";
    // Input will also be set when MultipartFormData is set.
    UsageFlags[UsageFlags["MultipartFormData"] = 32] = "MultipartFormData";
})(UsageFlags || (UsageFlags = {}));
//# sourceMappingURL=interfaces.js.map