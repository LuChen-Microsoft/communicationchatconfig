import { DecoratorContext, EmitContext, Enum, EnumMember, Interface, Model, ModelProperty, Namespace, Operation, Type, Union } from "@typespec/compiler";
import { AccessFlags, LanguageScopes, SdkClient, SdkContext, SdkEmitterOptions, SdkHttpOperation, SdkOperationGroup, SdkServiceOperation, UsageFlags } from "./interfaces.js";
import { TCGCContext } from "./internal-utils.js";
export declare const namespace = "Azure.ClientGenerator.Core";
export declare function $client(context: DecoratorContext, target: Namespace | Interface, options?: Model, scope?: LanguageScopes): void;
/**
 * Return the client object for the given namespace or interface, or undefined if the given namespace or interface is not a client.
 *
 * @param context TCGCContext
 * @param type Type to check
 * @returns Client or undefined
 */
export declare function getClient(context: TCGCContext, type: Namespace | Interface): SdkClient | undefined;
/**
 * List all the clients.
 *
 * @param context TCGCContext
 * @returns Array of clients
 */
export declare function listClients(context: TCGCContext): SdkClient[];
export declare function $operationGroup(context: DecoratorContext, target: Namespace | Interface, scope?: LanguageScopes): void;
/**
 * Check a namespace or interface is an operation group.
 * @param context TCGCContext
 * @param type Type to check
 * @returns boolean
 */
export declare function isOperationGroup(context: TCGCContext, type: Namespace | Interface): boolean;
/**
 * Check an operation is in an operation group.
 * @param context TCGCContext
 * @param type Type to check
 * @returns boolean
 */
export declare function isInOperationGroup(context: TCGCContext, type: Namespace | Interface | Operation): boolean;
/**
 * Return the operation group object for the given namespace or interface or undefined is not an operation group.
 * @param context TCGCContext
 * @param type Type to check
 * @returns Operation group or undefined.
 */
export declare function getOperationGroup(context: TCGCContext, type: Namespace | Interface): SdkOperationGroup | undefined;
/**
 * List all the operation groups inside a client or an operation group. If ignoreHierarchy is true, the result will include all nested operation groups.
 *
 * @param context TCGCContext
 * @param group Client or operation group to list operation groups
 * @param ignoreHierarchy Whether to get all nested operation groups
 * @returns
 */
export declare function listOperationGroups(context: TCGCContext, group: SdkClient | SdkOperationGroup, ignoreHierarchy?: boolean): SdkOperationGroup[];
/**
 * List operations inside a client or an operation group. If ignoreHierarchy is true, the result will include all nested operations.
 * @param program TCGCContext
 * @param group Client or operation group to list operations
 * @param ignoreHierarchy Whether to get all nested operations
 * @returns
 */
export declare function listOperationsInOperationGroup(context: TCGCContext, group: SdkOperationGroup | SdkClient, ignoreHierarchy?: boolean): Operation[];
interface CreateSdkContextOptions {
    readonly versionStrategy?: "ignore";
}
export declare function createSdkContext<TOptions extends Record<string, any> = SdkEmitterOptions, TServiceOperation extends SdkServiceOperation = SdkHttpOperation>(context: EmitContext<TOptions>, emitterName?: string, options?: CreateSdkContextOptions): SdkContext<TOptions, TServiceOperation>;
export declare function $protocolAPI(context: DecoratorContext, entity: Operation, value: boolean, scope?: LanguageScopes): void;
export declare function $convenientAPI(context: DecoratorContext, entity: Operation, value: boolean, scope?: LanguageScopes): void;
export declare function shouldGenerateProtocol(context: TCGCContext, entity: Operation): boolean;
export declare function shouldGenerateConvenient(context: TCGCContext, entity: Operation): boolean;
/**
 * @deprecated Use `usage` and `access` decorator instead.
 */
export declare function $exclude(context: DecoratorContext, entity: Model, scope?: LanguageScopes): void;
/**
 * @deprecated Use `usage` and `access` decorator instead.
 */
export declare function $include(context: DecoratorContext, entity: Model, scope?: LanguageScopes): void;
/**
 * @deprecated This function is unused and will be removed in a future release.
 */
export declare function isExclude(context: TCGCContext, entity: Model): boolean;
/**
 * @deprecated This function is unused and will be removed in a future release.
 */
export declare function isInclude(context: TCGCContext, entity: Model): boolean;
export type ClientFormat = "unixtime" | "iso8601" | "rfc1123" | "seconds";
/**
 * @deprecated Use `encode` decorator in `@typespec/core` instead.
 */
export declare function $clientFormat(context: DecoratorContext, target: ModelProperty, format: ClientFormat, scope?: LanguageScopes): void;
/**
 * Gets additional information on how to serialize / deserialize TYPESPEC standard types depending
 * on whether additional serialization information is provided or needed
 *
 * @param context the Sdk Context
 * @param entity the entity whose client format we are going to get
 * @returns the format in which to serialize the typespec type or undefined
 * @deprecated This function is unused and will be removed in a future release.
 */
export declare function getClientFormat(context: TCGCContext, entity: ModelProperty): ClientFormat | undefined;
/**
 * Whether a operation is internal and should not be exposed
 * to end customers
 *
 * @param context DecoratorContext
 * @param target Operation to mark as internal
 * @param scope Names of the projection (e.g. "python", "csharp", "java", "javascript")
 * @deprecated Use `access` decorator instead.
 */
export declare function $internal(context: DecoratorContext, target: Operation, scope?: LanguageScopes): void;
/**
 * Whether a model / operation is internal or not. If it's internal, emitters
 * should not expose them to users
 *
 * @param context TCGCContext
 * @param entity model / operation that we want to check is internal or not
 * @returns whether the entity is internal
 * @deprecated This function is unused and will be removed in a future release.
 */
export declare function isInternal(context: TCGCContext, entity: Model | Operation | Enum | Union): boolean;
export declare function $usage(context: DecoratorContext, entity: Model | Enum | Union, value: EnumMember | Union, scope?: LanguageScopes): void;
export declare function getUsageOverride(context: TCGCContext, entity: Model | Enum | Union): UsageFlags | undefined;
export declare function getUsage(context: TCGCContext, entity: Model | Enum): UsageFlags;
export declare function $access(context: DecoratorContext, entity: Model | Enum | Operation | Union, value: EnumMember, scope?: LanguageScopes): void;
export declare function getAccessOverride(context: TCGCContext, entity: Model | Enum | Operation | Union): AccessFlags | undefined;
export declare function getAccess(context: TCGCContext, entity: Model | Enum | Operation | Union): AccessFlags;
/**
 * Whether a model property should be flattened.
 *
 * @param context DecoratorContext
 * @param target ModelProperty to mark as flattened
 * @param scope Names of the projection (e.g. "python", "csharp", "java", "javascript")
 * @deprecated This decorator is not recommended to use.
 */
export declare function $flattenProperty(context: DecoratorContext, target: ModelProperty, scope?: LanguageScopes): void;
/**
 * Whether a model property should be flattened or not.
 *
 * @param context TCGCContext
 * @param target ModelProperty that we want to check whether it should be flattened or not
 * @returns whether the model property should be flattened or not
 */
export declare function shouldFlattenProperty(context: TCGCContext, target: ModelProperty): boolean;
export declare function $clientName(context: DecoratorContext, entity: Type, value: string, scope?: LanguageScopes): void;
export declare function getClientNameOverride(context: TCGCContext, entity: Type): string | undefined;
export {};
//# sourceMappingURL=decorators.d.ts.map