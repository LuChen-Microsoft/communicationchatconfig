export declare const reportDiagnostic: <C extends "versioned-dependency-tuple" | "versioned-dependency-tuple-enum-member" | "versioned-dependency-same-namespace" | "versioned-dependency-record-not-mapping" | "versioned-dependency-not-picked" | "version-not-found" | "version-duplicate" | "using-versioned-library" | "invalid-renamed-from-value" | "no-service-fixed-version" | "incompatible-versioned-reference" | "incompatible-versioned-namespace-use-dependency" | "made-optional-not-optional" | "made-required-optional" | "renamed-duplicate-property", M extends keyof {
    "versioned-dependency-tuple": {
        default: string;
    };
    "versioned-dependency-tuple-enum-member": {
        default: string;
    };
    "versioned-dependency-same-namespace": {
        default: string;
    };
    "versioned-dependency-record-not-mapping": {
        default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "versioned-dependency-not-picked": {
        default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "version-not-found": {
        default: import("@typespec/compiler").CallableMessage<[string, string, string]>;
    };
    "version-duplicate": {
        default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "using-versioned-library": {
        default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "invalid-renamed-from-value": {
        default: string;
    };
    "no-service-fixed-version": {
        default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "incompatible-versioned-reference": {
        default: import("@typespec/compiler").CallableMessage<[string, string]>;
        addedAfter: import("@typespec/compiler").CallableMessage<[string, string, string, string]>;
        dependentAddedAfter: import("@typespec/compiler").CallableMessage<[string, string, string, string]>;
        removedBefore: import("@typespec/compiler").CallableMessage<[string, string, string, string]>;
        dependentRemovedBefore: import("@typespec/compiler").CallableMessage<[string, string, string, string]>;
        versionedDependencyAddedAfter: import("@typespec/compiler").CallableMessage<[string, string, string, string]>;
        versionedDependencyRemovedBefore: import("@typespec/compiler").CallableMessage<[string, string, string, string]>;
        doesNotExist: import("@typespec/compiler").CallableMessage<[string, string, string]>;
    };
    "incompatible-versioned-namespace-use-dependency": {
        default: string;
    };
    "made-optional-not-optional": {
        default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "made-required-optional": {
        default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "renamed-duplicate-property": {
        default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
}[C]>(program: import("@typespec/compiler").Program, diag: import("@typespec/compiler").DiagnosticReport<{
    "versioned-dependency-tuple": {
        default: string;
    };
    "versioned-dependency-tuple-enum-member": {
        default: string;
    };
    "versioned-dependency-same-namespace": {
        default: string;
    };
    "versioned-dependency-record-not-mapping": {
        default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "versioned-dependency-not-picked": {
        default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "version-not-found": {
        default: import("@typespec/compiler").CallableMessage<[string, string, string]>;
    };
    "version-duplicate": {
        default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "using-versioned-library": {
        default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "invalid-renamed-from-value": {
        default: string;
    };
    "no-service-fixed-version": {
        default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "incompatible-versioned-reference": {
        default: import("@typespec/compiler").CallableMessage<[string, string]>;
        addedAfter: import("@typespec/compiler").CallableMessage<[string, string, string, string]>;
        dependentAddedAfter: import("@typespec/compiler").CallableMessage<[string, string, string, string]>;
        removedBefore: import("@typespec/compiler").CallableMessage<[string, string, string, string]>;
        dependentRemovedBefore: import("@typespec/compiler").CallableMessage<[string, string, string, string]>;
        versionedDependencyAddedAfter: import("@typespec/compiler").CallableMessage<[string, string, string, string]>;
        versionedDependencyRemovedBefore: import("@typespec/compiler").CallableMessage<[string, string, string, string]>;
        doesNotExist: import("@typespec/compiler").CallableMessage<[string, string, string]>;
    };
    "incompatible-versioned-namespace-use-dependency": {
        default: string;
    };
    "made-optional-not-optional": {
        default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "made-required-optional": {
        default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "renamed-duplicate-property": {
        default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
}, C, M>) => void, createStateSymbol: (name: string) => symbol, VersioningStateKeys: Record<"versionIndex" | "addedOn" | "removedOn" | "versions" | "useDependencyNamespace" | "useDependencyEnum" | "renamedFrom" | "madeOptional" | "madeRequired" | "typeChangedFrom" | "returnTypeChangedFrom", symbol>;
//# sourceMappingURL=lib.d.ts.map