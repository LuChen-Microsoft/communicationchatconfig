import { DiagnosticResult, Type, type Diagnostic, type ModelProperty, type Program } from "@typespec/compiler";
import { Visibility } from "./metadata.js";
import { HeaderFieldOptions, PathParameterOptions, QueryParameterOptions } from "./types.js";
export type HttpProperty = HeaderProperty | ContentTypeProperty | QueryProperty | PathProperty | StatusCodeProperty | BodyProperty | BodyRootProperty | MultipartBodyProperty | BodyPropertyProperty;
export interface HttpPropertyBase {
    readonly property: ModelProperty;
}
export interface HeaderProperty extends HttpPropertyBase {
    readonly kind: "header";
    readonly options: HeaderFieldOptions;
}
export interface ContentTypeProperty extends HttpPropertyBase {
    readonly kind: "contentType";
}
export interface QueryProperty extends HttpPropertyBase {
    readonly kind: "query";
    readonly options: QueryParameterOptions;
}
export interface PathProperty extends HttpPropertyBase {
    readonly kind: "path";
    readonly options: PathParameterOptions;
}
export interface StatusCodeProperty extends HttpPropertyBase {
    readonly kind: "statusCode";
}
export interface BodyProperty extends HttpPropertyBase {
    readonly kind: "body";
}
export interface BodyRootProperty extends HttpPropertyBase {
    readonly kind: "bodyRoot";
}
export interface MultipartBodyProperty extends HttpPropertyBase {
    readonly kind: "multipartBody";
}
/** Property to include inside the body */
export interface BodyPropertyProperty extends HttpPropertyBase {
    readonly kind: "bodyProperty";
}
export interface GetHttpPropertyOptions {
    isImplicitPathParam?: (param: ModelProperty) => boolean;
}
/**
 * Find the type of a property in a model
 */
export declare function getHttpProperty(program: Program, property: ModelProperty, options?: GetHttpPropertyOptions): [HttpProperty, readonly Diagnostic[]];
/**
 * Walks the given input(request parameters or response) and return all the properties and where they should be included(header, query, path, body, as a body property, etc.)
 *
 * @param rootMapOut If provided, the map will be populated to link nested metadata properties to their root properties.
 */
export declare function resolvePayloadProperties(program: Program, type: Type, visibility: Visibility, options?: GetHttpPropertyOptions): DiagnosticResult<HttpProperty[]>;
//# sourceMappingURL=http-property.d.ts.map